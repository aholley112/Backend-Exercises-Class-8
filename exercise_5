rails new exercise_5_user_activation_api --api

cd exercise_5_user_activation_api

rails generate model User name:string email:string active:boolean

class User < ApplicationRecord
  has_many :posts, dependent: :destroy
end

rails db:migrate

rails generate model Post title:string content:text user:references

class Post < ApplicationRecord
  belongs_to :user
end

t.boolean :active, default: false

railsls db:migrate

rails generate controller Users

class UsersController < ApplicationController
  def activate
    user = User.find(params[:id])
    user.update(active: true)
    render json: { message: "User activated successfully" }, status: :ok
  end

  def deactivate
    user = User.find(params[:id])
    user.update(active: false)
    render json: { message: "User deactivated successfully" }, status: :ok
  end
end

rails db:migrate

rails generate controller Posts

class PostsController < ApplicationController
  before_action :check_user_activation, only: [:create]

  def index
    posts = Post.joins(:user).where(users: { active: true })
    render json: posts
  end

  def show
    post = Post.joins(:user).find_by(id: params[:id], users: { active: true })
    if post
      render json: post
    else
      render json: { error: "Post not available" }, status: :not_found
    end
  end

  def create
    post = current_user.posts.build(post_params)
    if post.save
      render json: post, status: :created
    else
      render json: post.errors, status: :unprocessable_entity
    end
  end

  private

  def post_params
    params.require(:post).permit(:title, :content)
  end

  def check_user_activation
    unless current_user&.active?
      render json: { error: "User is not active" }, status: :forbidden
      return
    end
  end

  def current_user
    User.find_by(id: params[:user_id])
  end
end

rails db:migrate 

Rails.application.routes.draw do
  resources :users do
    member do
      post :activate
      post :deactivate
    end
  end
  resources :posts
end

rails c 
